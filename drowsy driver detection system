import cv2
from tkinter import *
from scipy.spatial import distance as dist

import threading

# Function to compute eye aspect ratio (EAR)
def eye_aspect_ratio(eye):
    A = dist.euclidean(eye[1], eye[5])
    B = dist.euclidean(eye[2], eye[4])
    C = dist.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

# Constants for drowsiness detection
EAR_THRESHOLD = 0.3  # Eye aspect ratio to indicate blink
CONSECUTIVE_FRAMES_THRESHOLD = 48  # Number of consecutive frames for drowsiness detection




# Function to start video stream
def start_video_stream():
    global stop_stream
    cap = cv2.VideoCapture(0)
    while True:
        if stop_stream:
            break
        ret, frame = cap.read()
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        for (x, y, w, h) in faces:
            roi_gray = gray[y:y + h, x:x + w]
            eyes = eye_cascade.detectMultiScale(roi_gray)

            for (ex, ey, ew, eh) in eyes:
                eye = roi_gray[ey:ey + eh, ex:ex + ew]
                ear = eye_aspect_ratio([(ex, ey), (ex + ew, ey), (ex, ey + eh), (ex + ew, ey + eh), (ex + ew // 2, ey + eh // 2), (ex + ew // 2, ey + eh // 2)])
                cv2.rectangle(frame, (x + ex, y + ey), (x + ex + ew, y + ey + eh), (0, 255, 0), 2)

                if ear < EAR_THRESHOLD:
                    frame_counter += 1
                    if frame_counter >= CONSECUTIVE_FRAMES_THRESHOLD:
                        if not drowsy:
                            play_alarm_sound()
                            drowsy = True
                else:
                    frame_counter = 0
                    drowsy = False

                cv2.putText(frame, "EAR: {:.2f}".format(ear), (300, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

        cv2.imshow("Frame", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# Function to stop video stream
def stop_video_stream():
    global stop_stream
    stop_stream = True

# Create tkinter GUI
root = Tk()
root.title("Drowsy Driver Detection")

# Start and stop buttons
start_button = Button(root, text="Start", command=lambda: threading.Thread(target=start_video_stream).start())
start_button.pack()

stop_button = Button(root, text="Stop", command=stop_video_stream)
stop_button.pack()

stop_stream = False

# Load face and eye cascade classifiers
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

root.mainloop()
